-- UserService
CREATE SCHEMA user_service;

CREATE TABLE user_service.users (
    id INT PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    bio TEXT,
    registration_date DATE
);

-- UserRole Service
CREATE SCHEMA role_service;

CREATE TABLE role_service.role (
    id INT PRIMARY KEY,
    type VARCHAR(255) NOT NULL
);

CREATE TABLE role_service.user_role (
    user_id INT REFERENCES user_service.users(id),
    role_id INT REFERENCES role_service.role(id),
    PRIMARY KEY (user_id, role_id)
);

-- NotificationService
CREATE SCHEMA notification_service;

CREATE TABLE notification_service.blog_notifications (
    id INT PRIMARY KEY,
    related_entity_id INT,
    notification_type VARCHAR(255),
    content TEXT,
    creation_date DATE,
    related_entity_type VARCHAR(255)
);

CREATE TABLE notification_service.blog_user_notifications (
    user_id INT REFERENCES user_service.users(id),
    notification_id INT REFERENCES notification_service.blog_notifications(id),
    PRIMARY KEY(user_id, notification_id)
);

-- PostService
CREATE SCHEMA post_service;

CREATE TABLE post_service.blog_post (
    id INT PRIMARY KEY,
    title VARCHAR(255),
    content TEXT,
    author_id INT REFERENCES user_service.users(id),
    updated_at DATE,
    created_at DATE DEFAULT CURRENT_DATE,
    visibility VARCHAR(255)
);

CREATE TABLE post_service.blog_image (
    id INT PRIMARY KEY,
    url VARCHAR(1024) NOT NULL,
    alt_text VARCHAR(255),
    post_id INT REFERENCES post_service.blog_post(id)
);

CREATE TABLE post_service.blog_tag (
    id INT PRIMARY KEY,
    tag_name VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE post_service.blog_post_tag (
    post_id INT REFERENCES post_service.blog_post(id),
    tag_id INT REFERENCES post_service.blog_tag(id),
    PRIMARY KEY(post_id, tag_id)
);

CREATE TABLE post_service.blog_category (
    id INT PRIMARY KEY,
    category_name VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE post_service.blog_post_category (
    post_id INT REFERENCES post_service.blog_post(id),
    category_id INT REFERENCES post_service.blog_category(id),
    PRIMARY KEY(post_id, category_id)
);

-- CommunityService
CREATE SCHEMA community_service;

CREATE TABLE community_service.blog_community (
    id INT PRIMARY KEY,
    community_name VARCHAR(255) NOT NULL,
    community_creator INT REFERENCES user_service.users(id)
);

CREATE TABLE community_service.blog_user_community (
    user_id INT REFERENCES user_service.users(id),
    community_id INT REFERENCES community_service.blog_community(id),
    PRIMARY KEY(user_id, community_id)
);

CREATE TABLE community_service.blog_post_community (
    post_id INT REFERENCES post_service.blog_post(id),
    community_id INT REFERENCES community_service.blog_community(id),
    PRIMARY KEY(post_id, community_id)
);

-- MessageService
CREATE SCHEMA message_service;

CREATE TABLE message_service.blog_conversation (
    id INT PRIMARY KEY,
    user1_id INT REFERENCES user_service.users(id),
    user2_id INT REFERENCES user_service.users(id)
);

CREATE TABLE message_service.blog_direct_message (
    id INT PRIMARY KEY,
    conversation_id INT REFERENCES message_service.blog_conversation(id),
    sender_id INT REFERENCES user_service.users(id),
    content TEXT NOT NULL,
    creation_date DATE,
    read BOOLEAN DEFAULT FALSE
);

-- FollowService
CREATE SCHEMA follow_service;

CREATE TABLE follow_service.blog_user_followers (
    id INT PRIMARY KEY,
    follower_id INT REFERENCES user_service.users(id),
    followed_id INT REFERENCES user_service.users(id),
    follow_date DATE DEFAULT CURRENT_DATE
);

-- HistoryService
CREATE SCHEMA history_service;

-- Table to store user browsing history
CREATE TABLE history_service.browsing_history (
    id INT PRIMARY KEY,
    user_id INT REFERENCES user_service.users(id),
    entity_id INT,  -- This will store the ID of the post or community that the user browsed
    entity_type VARCHAR(255) NOT NULL,  -- This will store the type of entity the user browsed (e.g., "post", "community")
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE INDEX idx_user_id ON history_service.browsing_history(user_id);
CREATE INDEX idx_timestamp ON history_service.browsing_history(timestamp);


CREATE SEQUENCE user_service.users_id_seq


CREATE OR REPLACE FUNCTION set_user_id()
RETURNS TRIGGER AS $$
BEGIN
    NEW.id := NEXTVAL('user_service.users_id_seq');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER before_users_insert
BEFORE INSERT ON user_service.users
FOR EACH ROW
EXECUTE FUNCTION set_user_id();

{
    "title": "YiYang Title",
    "content": "Your post content here.. ABC",
    "authorId": 2,
    "visibility": "public",
    "postTags": [
        {
            "tag": {
                "id": 1  // Your existing category ID here
            }
        },
        {
            "tag": {
                "id": 2  // Another existing category ID
            }
        }
    ],
    "postCategories": [
        {
            "category": {
                "id": 1  // Your existing category ID here
            }
        },
        {
            "category": {
                "id": 2  // Another existing category ID
            }
        }
    ]
}

select * from post_service.blog_post_category
select * from post_service.blog_category
select * from post_service.blog_post
select * from user_service.users
select * from post_service.blog_post_tag
select * from post_service.blog_post_tag
select * from post_service.blog_image

CREATE SEQUENCE post_service.blog_image_id_seq


ALTER TABLE post_service.blog_image ALTER COLUMN id SET DEFAULT nextval('post_service.blog_image_id_seq'::regclass);

CREATE OR REPLACE FUNCTION post_service.set_blog_image_id()
RETURNS TRIGGER AS $$
BEGIN
   IF NEW.id IS NULL OR NEW.id = 0 THEN
      NEW.id := nextval('post_service.blog_image_id_seq'::regclass);
   END IF;
   RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_set_blog_image_id
BEFORE INSERT ON post_service.blog_image
FOR EACH ROW
EXECUTE FUNCTION post_service.set_blog_image_id();



select * from post_service.blog_post_category
select * from post_service.blog_category
select * from post_service.blog_post
select * from user_service.users
select * from post_service.blog_post_tag
select * from post_service.blog_image

/*Post save测试*/
{
    "title": "YiYang Title CC",
    "content": "Your post content here.. ABC",
    "authorId": 8,
    "visibility": "public",
    "images": [
        {
            "url": "some_url_1.jpg",
            "altText": "Some Alt Text 1"
        },
        {
            "url": "some_url_2.jpg",
            "altText": "Some Alt Text 2"
        }
    ],
    "postTags": [
        {
            "tag": {
                "id": 1  // Your existing category ID here
            }
        },
        {
            "tag": {
                "id": 2  // Another existing category ID
            }
        }
    ]

}

/*Post更新测试*/
{
    "id" : 91,
    "title": "Yihehehe AAA CC test",
    "content": "Your post content here.. ABC",
    "authorId": 103,
    "visibility": "public",
    "images": [
        {
            "url": "some_url_3.jpg",
            "altText": "Some Alt Text 2"
        },
        {
            "url": "some_url_4.jpg",
            "altText": "Some Alt Text 2"
        }
    ],
    "postTags": [
        {
            "tag": {
                "id": 1  // Your existing category ID here
            }
        },
        {
            "tag": {
                "id": 2  // Another existing category ID
            }
        }
    ],
    "postCategories": [
        {
            "category": {
                "id": 1  // Your existing category ID here
            }
        },
        {
            "category": {
                "id": 2  // Another existing category ID
            }
        }
    ]

}
CREATE SEQUENCE community_service.community_id_seq;
select * from user_service.users;


http://localhost:8087/api/community/create
/* community create */
{
  "communityName": "NewCommunity",
  "communityCreator": 103
}

http://localhost:8087/api/community/follow
/* community follow */
{
  "communityId": "3",
  "userId": 106
}


/* delete */
http://localhost:8087/api/community/delete/7
{
    "userId": 103
}

/* http://localhost:8087/api/community/unfollow */

{
  "communityId": "4",
  "userId": 106
}
